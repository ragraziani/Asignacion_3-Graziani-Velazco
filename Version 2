# Miembros del grupo:

# Rafael Graziani y Anselmo Velazco

# Carga de librerías

library(tidyverse)
library(readxl)
library(haven)
library(data.table)
library(sjlabelled)
library(sjPlot)
library(mice)
library(survey)
library(dplyr)

# ----------------------------------------------------------------

# Base de datos a trabajar

personas <- read_sav("encovi_personas2017_ds.sav")

# Ver todas las etiquetas

view_df(personas)

# Columnas de la tabla "personas"

cols_personas <- c("ENNUMC", "LIN", "CMHP17", "CMHP18", "CMHP19",
                   "CMHP22", "EMHP28N", "EMHP28A", "EMHP28S",
                   "EMHP32", "TMHP36", "TMHP41", "TMHP43",
                   "TMHP44", "TMHP44BS", "TMHP48", "TMHP45BS",
                   "PMHP60BS", 
                   "PESOPERSONA", "GRPEDAD", "AESTUDIO", "Tciudad_max")

# Nueva tabla para manejar los datos sin modificar la base de datos original

personas_imputar <- personas %>%
  select(all_of(cols_personas))

# Arreglando los nombres de las columnas.

new_names_pers <- c("id_hogar", "id_per", "parentesco", "edad", "sexo", 
                    "sit_conyu", "nivel_edu", "edu_ano_aprobado", "edu_sem_aprobado",
                    "tipo_edu", "sit_econo", "sector_eco", "cat_ocupa",
                    "trab_remun", "ing_laboral", "horas_trab", "ing_otro",
                    "ing_pension",
                    "pesop", "grp_edad", "anos_edu", "tipo_ciudad")

# Renombrar.

personas_imputar <- personas %>%
  setnames(old = colnames(.),
           new = new_names_pers) %>%
  
  # Convierte los identificadores a caracteres.
  
  mutate(id_hogar = str_pad(id_hogar, width = 4, "left", "0"),
         id_per = str_pad(id_per, width = 2, "left", "0"))

# RECORDATORIO: Convertir en NAs aquellas respuestas 98 y 99.

personas_imputar[personas_imputar == 98 | personas_imputar == 99] <- NA
personas[personas == 98 | personas == 99] <- NA

# Filtrar a las personas que cumplan con las condiciones para ser imputadas
# Condiciones: 1. Declara estar trabajando de forma remunerada.
#              2. No declara ingresos recientes, pero tiene trabajo.

personas_imputar <- personas_imputar %>% 
  filter(sit_econo %in% c(1,2),
         trab_remun == 1,
         is.na(ing_laboral) | ing_laboral <= 0)

# Agrupando donantes

donantes <- personas %>%
  filter(sit_econo %in% c(1,2),
         trab_remun == 1,
         !is.na(ing_laboral)) #%>% 
#  group_by(sexo,
 #          grp_edad,
  #         nivel_edu) 

#grupos_donantes <- donantes #%>% 
#  summarise(n = n())

# Se evalúa si vale la pena ampliar los grupos de edad, revisando sus
# promedios de ingreso laboral.

resumen_grp_edad <- donantes %>%
  group_by(grp_edad) %>%
  summarise(mean_ing = mean(ing_laboral),
            w_mean = weighted.mean(ing_laboral,
                                   w = pesop, 
                                   na.rm = T),
            n = n())

# Tras revisar los promedios, notamos que vale la pena ampliar los
# grupos de edad, pues existe similitud entre varios. De esta forma
# se podrá trabajar con grupos más representativos, garantizando que
# cada recipiente tenga suficientes potenciales donantes.

# -------------------------------------------------------------------

# Cambiando las agrupaciones de grupos de edad a todos los dataframes
# que contenían los grupos de edad anteriores.

donantes <- donantes %>%
  mutate(grp_edad = case_when(
    grp_edad %in% c(2,3,4) ~ 1,
    grp_edad %in% c(5,6,7) ~ 2,
    grp_edad %in% c(8,9,10) ~ 3,
    grp_edad %in% c(11,12,13) ~ 4,
    grp_edad %in% c(14,15) ~ 5,
  ))

grupos_donantes <- donantes %>% #grupos_donantes %>%
#  mutate(grp_edad = case_when(
 #   grp_edad %in% c(2,3,4) ~ 1,
  #  grp_edad %in% c(5,6,7) ~ 2,
  #  grp_edad %in% c(8,9,10) ~ 3,
  #  grp_edad %in% c(11,12,13) ~ 4,
   # grp_edad %in% c(14,15) ~ 5,
#  )) %>% 
  group_by(sexo, grp_edad, nivel_edu) %>% 
  summarise(n=n()) %>% 
  ungroup()

personas_imputar <- personas_imputar %>%
  mutate(grp_edad = case_when(
    grp_edad %in% c(2,3,4) ~ 1,
    grp_edad %in% c(5,6,7) ~ 2,
    grp_edad %in% c(8,9,10) ~ 3,
    grp_edad %in% c(11,12,13) ~ 4,
    grp_edad %in% c(14,15) ~ 5,
  ))

# Unimos los dataframes de personas a imputar y de grupos de donantes.

personas_imputar <- personas_imputar %>%
  left_join(grupos_donantes, by = c("sexo",
                                    "grp_edad", 
                                    "nivel_edu")) %>% 
  rename(n_imp = n)


# Asegurarse de que las columnas tengan el mismo tipo en ambos dataframes

personas_imputar$sexo <- as.factor(personas_imputar$sexo)
donantes$sexo <- as.factor(donantes$sexo)

personas_imputar$grp_edad <- as.numeric(personas_imputar$grp_edad)
donantes$grp_edad <- as.numeric(donantes$grp_edad)

personas_imputar$nivel_edu <- as.numeric(personas_imputar$nivel_edu)
donantes$nivel_edu <- as.numeric(donantes$nivel_edu)

# Imputación
set.seed(123) # Para reproducibilidad

personas_imputar$ing_laboral_imp <- personas_imputar %>%
  rowwise() %>%
  mutate(ing_laboral_imp = {
    donantes_filtrados <- donantes %>%
      filter(sexo == .env$sexo, grp_edad == .env$grp_edad,
             (nivel_edu == .env$nivel_edu) | (is.na(nivel_edu) & is.na(.env$nivel_edu)))
    if (nrow(donantes_filtrados) > 0) {
      ifelse(
        nrow(donantes_filtrados) > 5,
      donantes_filtrados %>%
        sample_n(1) %>%
        pull(ing_laboral),
      weighted.mean(donantes_filtrados$ing_laboral, w = donantes_filtrados$pesop)
      )
    } else {
      NA
    }
  }) %>%
  pull(ing_laboral_imp)
